server:
  port: 8080

spring:
  application:
    name: InterviewCoach-v2

  # 数据库配置
  datasource:
    url: jdbc:mysql://localhost:3306/interviewcoach-v2?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      minimum-idle: 5
      maximum-pool-size: 20
      idle-timeout: 300000
      connection-timeout: 20000
      max-lifetime: 1200000
      pool-name: HikariCP-InterviewCoach
      connection-test-query: SELECT 1

  # JPA配置
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true

  # 邮件配置
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${GMAIL_USERNAME}
    password: ${GMAIL_APP_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          ssl:
            trust: smtp.gmail.com

  # Redis配置 - 修复线程池和连接池问题
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: 0
      timeout: 5000ms                     # 增加到5秒，适应队列操作
      lettuce:
        pool:
          max-active: 20                  # 修复：减少到合理值
          max-wait: 3000ms                # 修复：设置等待时间
          max-idle: 10                    # 修复：合理的空闲连接数
          min-idle: 2                     # 修复：最小空闲连接
        cluster:
          refresh:
            adaptive: true
            period: 30000ms

# MyBatis配置
mybatis:
  type-aliases-package: com.xinyu.InterviewCoach_v2.entity
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

# JWT配置
jwt:
  secret: ${JWT_SECRET}
  expiration: 86400000

# OpenAI API配置
openai:
  api:
    key: ${OPENAI_API_KEY}
    url: ${OPENAI_API_URL:https://api.openai.com/v1/chat/completions}
    timeout: 30000
    max-retries: 2
    retry-delay-ms: 1000
  model: ${OPENAI_MODEL:gpt-3.5-turbo}
  embedding:
    url: ${OPENAI_EMBEDDING_URL:https://api.openai.com/v1/embeddings}
    model: ${OPENAI_EMBEDDING_MODEL:text-embedding-3-small}
    batch-size: 20
    timeout: 25000

# 面试配置
interview:
  max-questions: 5
  default-question-count: 3
  session-timeout-minutes: 60

# 邮箱验证配置
email:
  verification:
    expiration-minutes: 5

# 缓存配置
cache:
  session:
    ttl: 1800
    prefix: "session:"
  message:
    ttl: 3600
    prefix: "message:"
  ai:
    enabled: true
    prefix: "ai:"
    first-question:
      ttl: 604800
    feedback:
      ttl: 259200
    similarity-threshold: 0.85
    embedding:
      enabled: true
      ttl: 86400
    max-similar-answers: 10

# 队列配置 - 修复核心问题
queue:
  ai:
    enabled: ${AI_QUEUE_ENABLED:true}

    # Redis Stream配置
    streams:
      requests: "ai:requests"
      responses: "ai:responses"

    # 消费者配置 - 修复
    consumer:
      group-name: "ai-service-group"
      consumer-name: "ai-consumer-${server.port:8080}-${random.int(1000)}"  # 修复：添加随机数避免冲突
      max-messages: 3                     # 修复：减少批次大小，避免资源争抢
      block-timeout: 1000                 # 修复：减少阻塞时间
      auto-ack: false

    # WebSocket响应消费者配置
    websocket:
      enabled: true
      consumer:
        group-name: "websocket-response-group"
        consumer-name: "ws-consumer-${server.port:8080}-${random.int(1000)}"  # 修复：添加随机数
        max-messages: 5                   # 修复：减少批次大小
        block-timeout: 500                # 修复：更短的等待时间
        auto-ack: false

    # 处理器配置 - 修复
    processors:
      max-retries: 3
      retry-delay-seconds: 5
      max-processing-time-seconds: 120    # 修复：添加最大处理时间

    # Topic配置 - 修复和简化
    topics:
      question-generation:
        enabled: true
        priority: "high"
      feedback-generation:
        enabled: true
        priority: "high"
      embedding-calculation:
        enabled: true
        priority: "medium"
        batch-size: 10                    # 修复：减少批次大小
      final-evaluation:
        enabled: true
        priority: "medium"                # 修复：改为中优先级

# WebSocket配置 - 修复
websocket:
  enabled: ${WEBSOCKET_ENABLED:true}
  endpoint: "/ws"
  allowed-origins: "*"
  heartbeat-interval: 30000
  max-text-message-size: 10240
  max-binary-message-size: 0

  # 连接管理
  connection:
    max-sessions: 500                     # 修复：减少最大连接数
    idle-timeout-seconds: 300

# 日志配置 - 修复和优化
logging:
  level:
    com.xinyu.InterviewCoach_v2: INFO     # 修复：改为INFO减少日志量
    com.xinyu.InterviewCoach_v2.queue: DEBUG  # 队列相关保持DEBUG便于调试
    org.springframework.data.redis: WARN
    org.hibernate.SQL: WARN
    root: INFO

  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{50} - %msg%n"

  file:
    name: logs/interview-coach.log
    max-size: 50MB                        # 修复：减少单文件大小
    max-history: 10                       # 修复：减少保存天数
    total-size-cap: 500MB                 # 修复：限制总大小

# 监控配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized

# 异步任务配置 - 修复线程池设置
async:
  core-pool-size: 3                       # 修复：减少核心线程数
  max-pool-size: 8                        # 修复：减少最大线程数
  queue-capacity: 50
  thread-name-prefix: "async-"
  keep-alive-seconds: 60

# 性能优化配置
performance:
  connection-pool:
    max-wait-millis: 3000                 # 连接池最大等待时间
    validation-timeout: 2000              # 连接验证超时

  thread-pool:
    ai-processor:
      core-size: 3                        # AI处理核心线程数
      max-size: 8                         # AI处理最大线程数
      queue-capacity: 100
      keep-alive: 60
    websocket-producer:
      core-size: 2                        # WebSocket生产者线程数
      max-size: 5
      queue-capacity: 50
      keep-alive: 30

# 开发环境特定配置
debug: false                              # 修复：关闭debug模式提升性能
spring.output.ansi.enabled: detect       # 修复：自动检测ANSI支持